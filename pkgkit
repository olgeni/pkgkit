#!/bin/sh

set -e -u -o pipefail

unset POSIXLY_CORRECT

CURDIR=$(dirname $0)

: ${BUILD_PACKAGES_ROOT:=/usr/local/poudriere/data/packages}

: ${BSDKIT_REMOTE:=""}

: ${POUDRIERE_VERBOSE:=""}

package_blacklist()
{
    ${CURDIR}/scan-blacklist -z ${PACKAGE_SET} -b ${BUILD_EXCLUDE_ROOT}/${PACKAGE_SET}-blacklist -f ${PACKAGE_ORIGIN}
}

package_build()
{
    if [ -n "${_enable_clean}" ]; then
        sudo poudriere pkgclean -y -j ${PACKAGE_JAIL} -p ${PACKAGE_TREE} -z ${PACKAGE_SET} -f ${PACKAGE_ORIGIN}
    fi

    sudo poudriere bulk ${POUDRIERE_VERBOSE} -j ${PACKAGE_JAIL} -p ${PACKAGE_TREE} -z ${PACKAGE_SET} -f ${PACKAGE_ORIGIN} -b latest
}

package_clean()
{
    sudo poudriere pkgclean -y ${POUDRIERE_VERBOSE} -j ${PACKAGE_JAIL} -p ${PACKAGE_TREE} -z ${PACKAGE_SET} -f ${PACKAGE_ORIGIN}
}

package_repo()
{
    sudo pkg repo ${PACKAGE_SOURCE}/
}

package_local_push()
{
    sudo rsync              \
         --archive          \
         --verbose          \
         --delete           \
         --inplace          \
         --max-delete=1000  \
	 --exclude=logs     \
         ${PACKAGE_SOURCE}/ \
         ${PACKAGE_LOCAL_TARGET}/
}

package_local_pull()
{
    if [ ! -d ${PACKAGE_SOURCE} ]; then
        local _timestamp=$(date +%s)

        local _path=$(dirname ${PACKAGE_SOURCE})

        sudo mkdir -p ${_path}/.real_${_timestamp}

        sudo ln -sf .real_${_timestamp}     ${_path}/.latest
        sudo ln -sf .latest/.buildname      ${_path}/.buildname
        sudo ln -sf .latest/.jailversion    ${_path}/.jailversion
        sudo ln -sf .latest/All             ${_path}/All
        sudo ln -sf .latest/digests.txz     ${_path}/digests.txz
        sudo ln -sf .latest/Latest          ${_path}/Latest
        sudo ln -sf .latest/meta.txz        ${_path}/meta.txz
        sudo ln -sf .latest/packagesite.txz ${_path}/packagesite.txz
    fi

    sudo rsync                    \
         --archive                \
         --verbose                \
         --delete                 \
         --inplace                \
         --max-delete=1000        \
	 --exclude=logs           \
         ${PACKAGE_LOCAL_TARGET}/ \
         ${PACKAGE_SOURCE}/
}

package_remote_push()
{
    if [ -z "${PACKAGE_REMOTE_TARGET}" ]; then
        return 1
    fi

    rsync                                \
        --rsh="ssh -i ${BSDKIT_SSH_KEY}" \
        --archive                        \
        --verbose                        \
        --partial                        \
        --delete                         \
        --delay-updates                  \
        --max-delete=1000                \
        ${PACKAGE_LOCAL_TARGET}/         \
        ${PACKAGE_REMOTE_TARGET}/
}

package_remote_pull()
{
    if [ -z "${PACKAGE_REMOTE_TARGET}" ]; then
        return 1
    fi

    sudo -E rsync                         \
         --rsh="ssh -i ${BSDKIT_SSH_KEY}" \
         --archive                        \
         --verbose                        \
         --partial                        \
         --delete                         \
         --delay-updates                  \
         --max-delete=1000                \
         ${PACKAGE_REMOTE_TARGET}/        \
         ${PACKAGE_LOCAL_TARGET}/
}

args=`getopt xbcesSrRCv $*`

set -- $args

while true; do
    case "$1" in
        -x)
            _perform_blacklist=YES
            shift
            ;;
        -b)
            _perform_build=YES
            shift
            ;;
        -c)
            _perform_clean=YES
            shift
            ;;
        -e)
            _perform_repo=YES
            shift
            ;;
        -s)
            _local_push=YES
            shift
            ;;
        -S)
            _local_pull=YES
            shift
            ;;
        -r)
            _remote_push=YES
            shift
            ;;
        -R)
            _remote_pull=YES
            shift
            ;;
        -C)
            _enable_clean=YES
            shift
            ;;
        -v)
            POUDRIERE_VERBOSE="-vv"
            shift
            ;;
        --)
            shift
            break
            ;;
    esac
done

: ${_perform_blacklist:=""}
: ${_perform_build:=""}
: ${_perform_clean:=""}
: ${_perform_repo:=""}
: ${_local_push:=""}
: ${_local_pull:=""}
: ${_remote_push:=""}
: ${_remote_pull:=""}
: ${_enable_clean:=""}

for _config in "$@"; do
    # reset
    PACKAGE_JAIL=""
    PACKAGE_ABI=""
    PACKAGE_TREE=""
    PACKAGE_SET=""
    # reset

    . ${_config}

    PACKAGE_BASENAME=packages-${PACKAGE_ABI}-${PACKAGE_TREE}-${PACKAGE_SET}

    BUILD_EXCLUDE_ROOT=$(realpath ${CURDIR}/blacklist)
    BUILD_ORIGIN_ROOT=$(realpath ${CURDIR}/origins/${PACKAGE_TREE})

    PACKAGE_ORIGIN=${BUILD_ORIGIN_ROOT}/${PACKAGE_ABI}-${PACKAGE_SET}.txt
    PACKAGE_SOURCE=${BUILD_PACKAGES_ROOT}/${PACKAGE_JAIL}-${PACKAGE_TREE}-${PACKAGE_SET}/.latest

    PKG_TXZ=${PACKAGE_SOURCE}/Latest/pkg.txz

    PACKAGE_LOCAL_TARGET=${BSDKIT_PATH}/${PACKAGE_BASENAME}

    if [ -n "${BSDKIT_REMOTE}" ]; then
        PACKAGE_REMOTE_TARGET=${BSDKIT_REMOTE}/${PACKAGE_BASENAME}
    else
        PACKAGE_REMOTE_TARGET=""
    fi

    if [ -n "${_perform_blacklist}" ]; then
        package_blacklist
    fi

    if [ -n "${_perform_build}" ]; then
        package_build
    fi

    if [ -n "${_perform_clean}" ]; then
        package_clean
    fi

    if [ -n "${_perform_repo}" ]; then
        package_repo
    fi

    if [ -n "${_local_push}" ]; then
        package_local_push
    fi

    if [ -n "${_remote_push}" ]; then
        package_remote_push
    fi

    if [ -n "${_remote_pull}" ]; then
        package_remote_pull
    fi

    if [ -n "${_local_pull}" ]; then
        package_local_pull
    fi
done
